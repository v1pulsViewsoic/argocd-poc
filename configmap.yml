# configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  context: |
    argocdUrl: http://localhost:8080
  service.slack: |
    token: $slack-token

  # Notification template when an application update starts
  template.app-update-started: |
    email:
      subject: Application {{.app.metadata.name}} update has started.
      message: |
        {{if eq .serviceType "slack"}}:rocket:{{end}} Application *{{.app.metadata.name}}* update has started at {{.app.status.operationState.startedAt}}.
        Check the details at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#0DADEA",
          "fields": [
            {
              "title": "Update Status",
              "value": "In Progress",
              "short": true
            },
            {
              "title": "Started At",
              "value": "{{.app.status.operationState.startedAt}}",
              "short": true
            }
          ]
        }]

  # Notification template when an application update succeeds
  template.app-update-succeeded: |
    email:
      subject: Application {{.app.metadata.name}} update has succeeded.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application *{{.app.metadata.name}}* has been successfully updated at {{.app.status.operationState.finishedAt}}.
        Check the details at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#18be52",
          "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Finished At",
              "value": "{{.app.status.operationState.finishedAt}}",
              "short": true
            }
          ]
        }]

  # Notification template when an application update fails
  template.app-update-failed: |
    email:
      subject: Application {{.app.metadata.name}} update has failed.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application *{{.app.metadata.name}}* update has failed at {{.app.status.operationState.finishedAt}} with error: {{.app.status.operationState.message}}.
        Check the details at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#E96D76",
          "fields": [
            {
              "title": "Sync Status",
              "value": "Failed",
              "short": true
            },
            {
              "title": "Finished At",
              "value": "{{.app.status.operationState.finishedAt}}",
              "short": true
            },
            {
              "title": "Error",
              "value": "{{.app.status.operationState.message}}",
              "short": true
            }
          ]
        }]

  # Trigger when the application update starts
  trigger.on-update-started: |
    - description: Application update has started
      send:
        - app-update-started
      when: app.status.operationState.phase in ['Running', 'InProgress']

  # Trigger when the application update succeeds
  trigger.on-update-succeeded: |
    - description: Application update has succeeded
      send:
        - app-update-succeeded
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'

  # Trigger when the application update fails
  trigger.on-update-failed: |
    - description: Application update has failed
      send:
        - app-update-failed
      when: app.status.operationState.phase in ['Failed', 'Error', 'Unknown']
